{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","winningSquare","className","Board","squares","winningMove","map","square","index","key","includes","Game","props","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXisNext","lines","i","length","a","b","c","calculateWinner","winner","timeInHistory","slice","currentBoard","nextBoard","_step","move","destination","step","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.748aa29e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Square = ({ value, onClick, winningSquare }) => {\r\n  return (\r\n    <button\r\n      className={`square ${winningSquare ? 'winningSquare' : ''}`}\r\n      onClick={onClick}\r\n    >\r\n      {value}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Square\r\n","import React from 'react'\r\nimport Square from './Square'\r\n\r\nconst Board = ({ squares, winningMove, onClick }) => {\r\n  return (\r\n    <div className=\"board\">\r\n      {squares.map((square, index) => (\r\n        <Square\r\n          key={index}\r\n          value={square}\r\n          onClick={() => onClick(index)}\r\n          winningSquare={winningMove.includes(index)}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Board\r\n","import React, { useState } from 'react'\r\nimport Board from './Board'\r\nimport { calculateWinner } from '../helpers'\r\n\r\nconst Game = (props) => {\r\n  const [history, setHistory] = useState([Array(9).fill(null)])\r\n  const [stepNumber, setStepNumber] = useState(0)\r\n  const [xIsNext, setXisNext] = useState(true)\r\n  const [winner, winningMove] = calculateWinner(history[stepNumber])\r\n\r\n  const handleClick = (index) => {\r\n    const timeInHistory = history.slice(0, stepNumber + 1)\r\n    const currentBoard = timeInHistory[stepNumber]\r\n    const nextBoard = [...currentBoard]\r\n    if (winner || nextBoard[index]) return\r\n    nextBoard[index] = xIsNext ? 'X' : 'O'\r\n    setHistory([...timeInHistory, nextBoard])\r\n    setStepNumber(timeInHistory.length)\r\n    setXisNext(!xIsNext)\r\n  }\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step)\r\n    setXisNext(step % 2 === 0)\r\n  }\r\n\r\n  const renderMoves = () =>\r\n    history.map((_step, move) => {\r\n      const destination = move ? `MOVE #${move}` : 'MOVE #0'\r\n      return (\r\n        <li key={move}>\r\n          <button className=\"move\" onClick={() => jumpTo(move)}>\r\n            {destination}\r\n          </button>\r\n        </li>\r\n      )\r\n    })\r\n\r\n  return (\r\n    <>\r\n      <div className=\"title\">\r\n        <span>{winner ? 'Winner: ' : 'Next Player: '}</span>\r\n        <span className=\"player\">{winner ? winner : xIsNext ? 'X' : 'O'}</span>\r\n      </div>\r\n      <Board\r\n        squares={history[stepNumber]}\r\n        winningMove={winningMove}\r\n        onClick={handleClick}\r\n      />\r\n      <div className=\"move-list\">\r\n        <p>{renderMoves()}</p>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Game\r\n","export function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ]\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i]\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return [squares[a], lines[i]]\r\n    }\r\n  }\r\n  return [null, []]\r\n}\r\n","import React from \"react\"\nimport Game from \"./components/Game\"\nimport \"./App.css\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}